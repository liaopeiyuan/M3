function [features,labels]=NNsample(size,varargin)
    opt.format='csv';
    opt.variant='CGAN';
    opt.parallel=true;
    opt.mani='kine';
    opt.DOF=6;
    opt.type='spherical';
    opt.r=0.5;
    opt.dist='uniform';
    opt.poseR=2;
    opt.ikine='analytic';
    opt.plim=10;
    opt.testRatio=0.1;
    
    opt = tb_optparse(opt, varargin);
    
    switch opt.mani
        case 'kine'
            randMani=@randKine;
        case 'dyna'
            randMani=@randDyna;
        otherwise
            error('cannot parse manipulator argument')
    end
    
    [initF,initL]=randomSample(opt);
    [~,fSize]=size(initF);
    [~,lSize]=size(initL);
    features=zeros(size,fSize);
    labels=zeros(size,lSize);
    clear initF initL fSize lSize
        
    if opt.parallel
        parfor i=1:size
            [featues(i,:),labels(i,:)]=randomSample(opt);
        end
    else
        for i=1:size
            [featues(i,:),labels(i,:)]=randomSample(opt);
        end
    end
    
    function [feature,label]=randomSample(opt)
        [featureSt,m]=randMani(opt.DOF,opt.type,opt.r,opt.dist);
        switch opt.variant
            case 'CGAN'
                for k=1:plim
                [vec,~,pose]=randPose(opt.poseR,opt.dist);
                output=threshold(m,pose,'ikine',opt.ikine);
                if not(isnan(output))
                    label=vec;
                    if opt.mani=='kine'
                        feature=horzcat(featureSt.D,featureSt.A,featureSt.alpha);
                    end
                    if opt.mani=='dyna'
                        feature=horzcat(feature,featureSt.mass,...
                                        reshape(featureSt.R,1,[]),...
                                        reshape(featureSt.l,1,[]),...
                                        featureSt.B,...
                                        reshape(featureSt.Tc,1,[]),...
                                        featureSt.G,featureSt.Jm);
                    end
                    break;
                end  
                end  
            otherwise
                error('cannot parse variant argument')
        end
    end
        
    switch opt.format
        case 'csv'
            csvwrite('featureTrain.csv',features(1:int32((1-opt.testRatio)*size),:))
            csvwrite('featureTrain.csv',features(1:int32((1-opt.testRatio)*size),:))
            
        otherwise
                error('cannot parse format argument')
    end
        
end

    

